// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {EVMStorageproof} from "../src/EVMStorageproof.sol";

contract EVMStorageproofTest is Test {
    EVMStorageproof public evmStorageproofInstance;

    function setUp() public {
        evmStorageproofInstance = new EVMStorageproof();
    }

    function test_blockhash() public {
        bytes32 expectedHash = 0xd332a3c9ba4ceb22ad9eb94aae2f241b9295cc7f0e49e48b66ecf24b7fc33f56;
        bytes32 actualHash = evmStorageproofInstance.getBlockHash(18702968);
        assertEq(actualHash, expectedHash);
    }

    function test_blockheader() public {
        bytes
            memory blockHeader = hex"f90236a0baecb75089c3a5b9b222ca3243ae5ee014e408f788c6c7b358bd656023e97899a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479494750381be1aba0504c666ee1db118f68f0780d4a0636cef916c061c6c4233a267f10b8fe56b079678c4eaef0d484c51b45126904ba0c89fdfbf523f92575f169d28e93e39e05576eba8b480865f121394c6a3c4dc5ba0399f5ee9ffc7aa8e5e2fdc1abfb84b0be181dc1a90aeb2d49ed8cdc687289504b90100012d8c48202810080040480080110020000040900240081201310002008010124001c00002020102581100200000000100690080c000134a03002219302c60040442c0448c0100801800c818a048c020022b010a022608100148000884040820104680884200008024c000a10002082000084002012c010084080450800aa081a0a6004e521200c42440100846000220102004e32849028c1420b2c045560050020c8a0950003a02000000022200221106021200c400091c00080c8501000000801250620044890404022280050008000480000014c80018008100000801e24118100040022026000880020c0004080c0200001012138240004041000000061080839adc688401c9c38083562c9d84656c238099d883010c00846765746888676f312e32302e34856c696e7578a0f9df170bcb3e874514487b60198af07db864c55818b7b67c2894143f1b89a5b68800000000000000000ea026608d86a2379f0a703d9b0d74b935cc9a83d2a4977d814f2de60f971cc46de1";
        uint256 blockNumber = 10148968;

        bool result = evmStorageproofInstance.getBlockHeader(
            blockNumber,
            blockHeader
        );

        assertTrue(result);
    }
}
